#Importing the dataset
library(readr)
data<-read.csv("query.csv")
View(data)
# Encoding the target feature as factor (In this case, Churn)
Ins <- factor(data$Ins, levels = c(1, 0))
View(Ins)
# Encoding the target feature as factor (In this case, Churn)
data$Ins <- factor(data$Ins, levels = c(1, 0))
#Encoding factor columns as factors (based on details)
data$ATM <- factor(data$ATM, levels = c(1, 0))
data$CD <- factor(data$Ins, levels = c(1, 0))
data$CD <- factor(data$CD, levels = c(1, 0))
View(data$CD)
#Numerical
str(data$ATMAmt)
#Numerical
str(data$AcctAge)
data$DDA <- factor(data$DDA, levels = c(1, 0)) #If has a checking acount
data$DirDep <- factor(data$DirDep, levels = c(1, 0)) #direct deposit (1=yes 0=no)
data$ILS <- factor(data$ILS, levels = c(1, 0)) #If owns Home
data$IRA <- factor(data$IRA, levels = c(1, 0)) #has retirement account (1=yes 0=no)
data$InArea <- factor(data$InArea, levels = c(1, 0)) #local address (1=yes 0=no)
data$Income #income in thousands of dollars
data$Inv <- factor(data$Inv, levels = c(1, 0)) #Has Investment account (1=yes 0=no)
data$LOC <- factor(data$LOC, levels = c(1, 0)) #has line of credit (1=yes 0=no)
data$MM <-  factor(data$MM, levels = c(1, 0)) #has money market account (1=yes 0=no)
data$MTG <- factor(data$MTG, levels = c(1, 0)) #has mortgage account (1=yes 0=no)
data$Moved <- factor(data$Moved, levels = c(1, 0)) #recent address change (1=yes 0=no)
data$NSF <- factor(data$NSF, levels = c(1, 0)) #occurrence of insufficient funds (1=yes 0=no)
data$SDB <- factor(data$SDB, levels = c(1, 0)) #has a safety deposit box (1=yes 0=no)
data$Sav <- factor(data$Sav, levels = c(1,0)) #
data$Ins <- factor(data$Ins, levels = c(1, 0)) #Objective: If has purchased the Insurance (1=yes 0=no)
#Encoding factor columns as factors (based on details)
data$ATM <- factor(data$ATM, levels = c(1, 0)) #If use ATM Sevice (1=yes 0=no)
data$CC <- factor(data$CC, levels = c(1, 0)) #If has credit card account (1=yes 0=no)
data$CD <- factor(data$CD, levels = c(1, 0)) #If has certificate of deposit (1=yes 0=no)
data$DDA <- factor(data$DDA, levels = c(1, 0)) #If has a checking acount (1=yes 0=no)
data$DirDep <- factor(data$DirDep, levels = c(1, 0)) #direct deposit (1=yes 0=no)
data$HMOwn <- factor(data$HMOwn, levels = c(1, 0)) #If owns Home (1=yes 0=no)
data$ILS <- factor(data$ILS, levels = c(1, 0)) #has installment loan (1=yes 0=no)
data$IRA <- factor(data$IRA, levels = c(1, 0)) #has retirement account (1=yes 0=no)
data$InArea <- factor(data$InArea, levels = c(1, 0)) #local address (1=yes 0=no)
data$Inv <- factor(data$Inv, levels = c(1, 0)) #Has Investment account (1=yes 0=no)
data$LOC <- factor(data$LOC, levels = c(1, 0)) #has line of credit (1=yes 0=no)
data$MM <-  factor(data$MM, levels = c(1, 0)) #has money market account (1=yes 0=no)
data$MTG <- factor(data$MTG, levels = c(1, 0)) #has mortgage account (1=yes 0=no)
data$Moved <- factor(data$Moved, levels = c(1, 0)) #recent address change (1=yes 0=no)
data$NSF <- factor(data$NSF, levels = c(1, 0)) #occurrence of insufficient funds (1=yes 0=no)
data$SDB <- factor(data$SDB, levels = c(1, 0)) #has a safety deposit box (1=yes 0=no)
data$Sav <- factor(data$Sav, levels = c(1,0)) #savings account (1=yes 0=no)
factors <- subset(data, select=c(ATM,CC,CD,DDA,DirDep,HMOwn,ILS,IRA,InArea,Inv,LOC,MM,MTG,Moved,NSF,SDB,Sav))
numerical <- subset(data, select= c(ATMAmt,AcctAge,Age,CCBal,CCPurc,CDBal,CRScore,CashBk,DDABal,Dep,DepAmt,HMVal,ILSBal,IRABa,Income,InvBal,LOCBal,LORes,MMBal,MMCred,MTGBal,NSFAmt,POS,POSAmt,Phone,SavBal,Teller))
data$IRABa #retirement account balance
numerical <- subset(data, select= c(ATMAmt,AcctAge,Age,CCBal,CCPurc,CDBal,CRScore,CashBk,DDABal,Dep,DepAmt,HMVal,ILSBal,IRABa,Income,InvBal,LOCBal,LORes,MMBal,MMCred,MTGBal,NSFAmt,POS,POSAmt,Phone,SavBal,Teller))
data$IRABa #retirement account balance
numerical <- subset(data, select=c(ATMAmt,AcctAge,Age,CCBal,CCPurc,CDBal,CRScore,CashBk,DDABal,Dep,DepAmt,HMVal,ILSBal,Income,InvBal,LOCBal,LORes,MMBal,MMCred,MTGBal,NSFAmt,POS,POSAmt,Phone,SavBal,Teller))
numerical <- cbind(numerica, data$IRABa)
numerical <- cbind(numerical, data$IRABa)
View(numerical)
IRABa <- data$IRABa
data$IRABal #retirement account balance
numerical <- subset(data, select=c(ATMAmt,AcctAge,Age,CCBal,CCPurc,CDBal,CRScore,CashBk,DDABal,Dep,DepAmt,HMVal,ILSBal,IRABal,Income,InvBal,LOCBal,LORes,MMBal,MMCred,MTGBal,NSFAmt,POS,POSAmt,Phone,SavBal,Teller))
View(numerical)
data$Checks #Number of Checks
numerical <- subset(data, select=c(ATMAmt,AcctAge,Age,CCBal,CCPurc,CDBal,CRScore,CashBk,Checks,DDABal,Dep,DepAmt,HMVal,ILSBal,IRABal,Income,InvBal,LOCBal,LORes,MMBal,MMCred,MTGBal,NSFAmt,POS,POSAmt,Phone,SavBal,Teller))
categorical <- subset(data, select= c(Branch,Res))
objective <- data$Ins
summary(numerical)
summary(categorical)
sumary(objective)
summary(objective)
11175/(11175+21089)
numerical_with_NAs <- numerical
corrmatrix_with_NAs <-cor(numerical_with_NAs,use="pairwise.complete.obs")
CorrMatrix_with_NAs <- round(corrmatrix_with_NAs, 2)
CorrMatrix_with_NAs
View(CorrMatrix_with_NAs)
hist(data$MTGBal)
summary(data$MTGBal)
library(corrplot)
install.packages("corrplot")
library(corrplot)
corrplot(corr_matrix_with_NAs, order = "hclust", tl.cex = 0.2)
corrplot(CorrMatrix_with_NAs, order = "hclust", tl.cex = 0.2)
corrplot(CorrMatrix_with_NAs, order = "hclust", tl.cex = 0.8)
SDremover <- function(data,perc) {
a <- lapply(data, function(x) sd(as.numeric(x),na.rm=T)/
(max(as.numeric(x),na.rm=T)-min(as.numeric(x),na.rm = T))) %>%
unlist()
ind <- which(a>perc)
return(data[,ind])
}
#Preprocessing with functions from Data review.R
library(magrittr)
library(dplyr)
NULLremover <- function(data,perc) {
a <- lapply(data, function(x) sum(is.na(x))/length(x)) %>% unlist()
ind <- which(a<perc)
return(data[,ind])
}
data2 <- data %>%
NULLremover(0.9) %>%
SDremover(0)
NULLremover <- function(data,perc_min) {
a <- lapply(data, function(x) sum(is.na(x))/length(x)) %>% unlist()
ind <- which(a<perc_min)
return(data[,ind])
}
data2 <- data %>%
NULLremover(0.9) %>%
SDremover(0)
library(caret)
train_DS_orig <- downSample(x = data2[-Ins], y = data2$Ins)
train_DS_orig <- downSample(x = data2[ , names(data2) != "Ins"], y = data2$Ins)
numerical_DS <- train_DS_orig[,c(numerical)]
categorical_DS <- train_DS_orig[,c(categorical)]
factors_DS <- train_DS_orig[,c(factors)]
num <- colnames(numerical)
numerical_DS <- train_DS_orig[num]
cat <- colnames(categorical)
categorical_DS <- train_DS_orig[cat]
factors_DS <- train_DS_orig[factors]
fac <- colnames(factors)
factors_DS <- train_DS_orig[fac]
numerical_with_NAs <- numerical_DS
corrmatrix_with_NAs <-cor(numerical_with_NAs,use="pairwise.complete.obs")
CorrMatrix_with_NAs <- round(corrmatrix_with_NAs, 2)
for(i in 1:ncol(corr_matrix_with_NAs)){
corr_matrix_with_NAs[is.na(corr_matrix_with_NAs[,i]), i] <- 0
}
View(CorrMatrix_with_NAs)
highly_correlated <- findCorrelation(Corr_matrix_with_NAs, cutoff=0.99)
highly_correlated <- findCorrelation(Corrmatrix_with_NAs, cutoff=0.99)
highly_correlated <- findCorrelation(CorrMatrix_with_NAs, cutoff=0.99)
library(corrplot)
corrplot(CorrMatrix_with_NAs, order = "hclust", tl.cex = 0.8)
train_DS_orig <- train_DS_orig[,-c(highly_correlated)] #181: Churn.X0 / 182:Churn.X1
train_DS_BI <- train_DS_orig %>% mutate_if(is.numeric, funs(ifelse(is.na(.), mean(.,na.rm = T),.))) %>%
mutate_if(is.factor, as.character) %>%
mutate_if(is.character,funs(factor(ifelse(is.na(.), "missing", .))))
train_DS_orig <- downSample(x = data2[ , names(data2) != "Ins"], y = data2$Ins)
highly_correlated <- findCorrelation(CorrMatrix_with_NAs, cutoff=0.9)
highly_correlated
highly_correlated <- findCorrelation(corrmatrix_with_NAs, cutoff=0.9)
highly_correlated
View(highly_correlated)
?findCorrelation
highly_correlated <- findCorrelation(corrmatrix_with_NAs, cutoff=0.9, names = TRUE)
train_DS_orig <- train_DS_orig[,-c(highly_correlated)] #181: Churn.X0 / 182:Churn.X1
train_DS_orig <- train_DS_orig[,-colnames(highly_correlated)] #181: Churn.X0 / 182:Churn.X1
train_DS_orig <- train_DS_orig[,!colnames(highly_correlated)] #181: Churn.X0 / 182:Churn.X1
train_DS_orig <- train_DS_orig[,!(colnames(train_DS_orig) %in% highly_correlated)] #181: Churn.X0 / 182:Churn.X1
train_DS_BI <- train_DS_orig %>% mutate_if(is.numeric, funs(ifelse(is.na(.), mean(.,na.rm = T),.))) %>%
mutate_if(is.factor, as.character) %>%
mutate_if(is.character,funs(factor(ifelse(is.na(.), "missing", .))))
View(train_DS_BI)
set.seed(31)
ind_BI <- sample(1:nrow(train_DS_BI),0.8*(nrow(train_DS_BI)))
train_BI <- train_DS_BI[ind_BI,-ncol(train_DS_BI)]
test_BI <- train_DS_BI[-ind_BI,-ncol(train_DS_BI)]
str(train_DS_BI$Class)
View(train_DS_BI$Class)
#train_DS_BI$Class <- factor(train_DS_BI$Class, levels = c(0, 1))
train_labels_BI <- train_DS_BI$Class[ind_BI]
test_labels_BI <- train_DS_BI$Class[-ind_BI]
#Train RF BI
rf_grid_BI <- expand.grid(mtry=ceiling(ncol(train_DS_BI)/2),splitrule="gini",min.node.size=100)
set.seed(1)
rf_BI <- train(x=train_BI,
y=make.names(train_labels_BI),
method="ranger", metric="ROC",num.trees=500,
trControl=fitControl,tuneGrid=rf_grid_BI,importance = 'impurity')
#Control for ML algorithms
##########################
fitControl <- trainControl(method = "CV", #Cross-validation
number = 3, #3-fold
verboseIter = TRUE, #Output while running
classProbs= TRUE, #needed for ROC
summaryFunction = twoClassSummary ) #needed for ROC
#Train RF BI
rf_grid_BI <- expand.grid(mtry=ceiling(ncol(train_DS_BI)/2),splitrule="gini",min.node.size=100)
set.seed(1)
rf_BI <- train(x=train_BI,
y=make.names(train_labels_BI),
method="ranger", metric="ROC",num.trees=500,
trControl=fitControl,tuneGrid=rf_grid_BI,importance = 'impurity')
rf_pred_BI <- predict(rf_BI,test_BI,type="prob")
cm_rf_BI <-table(rf_pred_BI$X1>0.5,test_labels_BI)
library(pROC)
cm_rf_BI
roc_rf_BI <- roc(test_labels_BI, rf_pred_BI$X1)
auc_rf_BI <-auc(roc_rf_BI)
auc_rf_BI
2283+2187
gbm_grid_BI <- expand.grid(n.trees=seq(100,600), interaction.depth=6, shrinkage=0.01,
n.minobsinnode=10)
set.seed(2)
gbm_BI <- train(x=train_BI,
y=make.names(train_labels_BI),
method="gbm", metric="ROC",
trControl=fitControl,tuneGrid=gbm_grid_BI)
gbm_pred_BI <- predict(gbm_BI,test_BI,type="prob")
cm_gbm_BI <- table(gbm_pred_BI$X1>0.5,test_labels_BI)
roc_gbm_BI <- roc(test_labels_BI, gbm_pred_BI$X1)
auc_gbm_BI <- auc(roc_gbm_BI)
auc_gbm_BI
#SVM BI
svm_grid_BI <- expand.grid(C=1,sigma=0.001)
set.seed(3)
svm_BI <- train(x=train_BI,
y=make.names(train_labels_BI),
method = "svmRadial",
metric="ROC",
preProcess = c("center","scale"), #necessary for svm
trControl=fitControl,
tuneGrid=svm_grid_BI)
View(train_BI)
binaryEncoding <- function(col) {
if(is.factor(col)) {
col_num <- col %>% as.numeric() %>% intToBits() %>%
as.integer() %>% matrix(ncol=length(col)) %>% t() %>% data.frame()
ind <- col_num %>% apply(2,function(x) all(x==0)) %>% {which(.==FALSE)} %>%
max()
return(col_num[,1:ind])
}
else return(col)
}
train_DS_orig_BE <- train_DS_orig %>% lapply(function(x) x <- binaryEncoding(x)) %>% data.frame()
View(train_DS_orig_BE)
anyNA(data)
